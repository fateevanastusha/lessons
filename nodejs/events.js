/* 
    NODEJS построен на событийно-ориентированной архитектуре. Определенные объекты ("эмиттеры") испускают
    именованные события, которые вызывают функции ("слушатели").

    Все объекты, которые испускают события - они являются инстансами класса EventEmitter. Они используют функцию
    eventEmitter.on(), которая позволяет прикрепить коллбеки к событию по указанному имени. (обычно для имени 
    события создают маски, например [path]-[method]).
    Функции, прикрепленные к одному событию, вызываются синхронно и в том же порядке, в котором они переданы. 
    (Если эти функции возвращают значения, они игнорируются и отбрасываются). 

    Если попытаться вызвать несуществующее событие - оно вернет false.
*/

const EventEmitter = require('events');

//Создаем свой собственный emitter.
class MyEmitter extends EventEmitter {}

//Создали инстанс собственного эмиттера.
const myEmitter = new MyEmitter();
//Подписались на событие с именем event, добавили ему коллбек, который логает контекст.
//Если передать стрелочную функцию, то this уже не будет указывать на контекст родителя.
myEmitter.on('event', function () {
  console.log('this is event context', this);
});

//Вызываем событие
myEmitter.emit('event');

console.log('-------------------------------------------');

/* 
  Слушатель вызывает функции синхронно и последовательно, в том же самом порядке, в котором они были зарегистрированы.
  Если нужно, можно сделать функции слушателей асинхронными через setImmidiate() или process.nextTick().
*/

myEmitter.on('async event', () => {
  //Теперь это будет происходить асинхронно.
  setImmediate(() => {
    console.log('async!');
  });
});

// myEmitter.emit('async event');

/*

  Когда слушатель регистрируется через .on() - мы сможем стриггерить его сколько угодно раз через .emit().
  Если нужно зарегистрировать событие, которое можно вызвать только один раз, нужно использовать .once().
  (после первого вызова слушатель снимется с регистрации).

*/

myEmitter.on('multiple event', () => {
  console.log('MULTIPLE');
});

myEmitter.emit('multiple event');
myEmitter.emit('multiple event');
myEmitter.emit('multiple event');
myEmitter.emit('multiple event');
myEmitter.emit('multiple event');

myEmitter.once('once event', () => {
  console.log('ONCE');
});

myEmitter.emit('once event');
myEmitter.emit('once event'); //второй вызов просто проигнорируется, так как такого события уже нет.

console.log('-------------------------------------------');

