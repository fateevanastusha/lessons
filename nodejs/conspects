NodeJS - платформа, превращающая JS в машинный код.

Под капотом:
1) движок v8 (разр Google). Написан на C++.
    - компилирует JS в машинный код
    - выделяет память
    - собирает мусор (удаляет объекты на которые больше нет ссылки)

2) LibUV
    - кроссплатформенность (помогает NODEJS работать на любой оперативной системе)
    - методы для работы с файлами, сетью
    - предоставляет Event Loop (цикл событий) (во многих языках программирования по умолчанию 
    все команды - блокирующие, то есть блокируют основной поток кода, для избежания этой ситуации 
    используют thread managment, то есть выполняют тяжелые операции
    вне основного потока кода, в другом потоке, что реализует неблокирующий I0,  
    в NODEJS же для этого существует Event Loop и асинхронные операции.)

БЛОКИРУЮЩИЙ IO

let user = {name, age}
let count = 0
count += 1
user.count = count
database.save(user)
return user

код выполняется сверху вниз, строчка за строчкой. И пока строчка не выполнится, следующая не начнет
выполняться.

НЕБЛОКИРУЮЩИЙ IO:
(для решения используется)

1) thread managment
Под каждую операцию выделяется отдельный поток (чтение DB, запись файла, обработка http)
минусы: 
- поток может простаивать
- поток потребляет очень много ресурсов
- очень сложно управлять потоками

2) Неблокирующий IO

- один поток, по которому идут запросы. Системные вызовы немедленно возвращают управление, не ожидая
выполнения чтения/записи и других операций. При этом поток не блокируется.
Обычно для реализации используют шаблон цикла ожидания (простейший), либо более эффективный - 
демультиплексор событий.

Сам NodeJS является однопоточным, при написании кода потоками не управляют. У NodeJS под капотом находится
библиотека LibUV, которая как раз имеет доступ к управлению потоками. У него 4 потока. (можно изменить дефолтное 
количество потоков).

Некоторые библиотеки для nodejs так же управляют потоками, так как написаны на C++.

ДЕМУЛЬТИПЛЕКСОР СОБЫТИЙ
- интерфейс уведомление о событиях
1) сборка задач
2) постановка watchерить события IO
3) блокировка новых событий
EVENT LOOP
- синхронно выполняет задачи из очереди
ОЧЕРЕДЬ СОБЫТИЙ
- хранит в себе событие (закончилось время у таймера, прошел запрос) и его обработчик (callback), 
который нужно выполнять по завершении события (callback).
ПРИЛОЖЕНИЕ
- в нашем случае nodejs приложение, которое ожидает и принимает запросы IO. (сетевой запрос, обращение к бд и тд), а так же
их обрабатывает.

Все эти элементы нужны для реализации шаблона REACTOR, который и реализует неблокирующий IO.

ШАБЛОН REACTOR
(картинка reactor.png)
1. Приложение создает новую операцию IO, определяет обработчик, передает событие в демультиплексор событий.
2. Демультиплексор событий добавит событие в очередь и немедленно вернет управление приложению. Отправка нового 
события не приводит
к блокировке приложения.
3. Event Loop выполняет обход событий.
4. Event Loop вызывает соответствущие обработчики (коллбеки) для каждого события, возвращает результат
в приложение.
5. Если коллбек породил еще какие-то события, то оно снова передает управление Event Loop (если там появляются
какие-то асинхронные операции, они добавляются в демультиплексор событий и вся схема идет заново). В ином случае
отправляет клиенту.

EVENT LOOP
- элемент, позволяющий NODEJS выполнять асинхронные неблокирующие IO операции.
Имеет 6 фаз: 

Is loop alive? no > END
\/ yes
tinners callbacks (setTimeount, setInterval)
\/
pending callbacks (callbacks, отл до следующего цикла, error)
\/
prepare (внутреннаяя фаза, у нас нет доступа сюда.)
\/
pool (Все кроме таймеров и setImmidiate, происходит получение новых IO, коллбеки, связанные с IO.
Если есть setImmidiate - он сразу переходит в фазу check (пропуская стадию). Может блокироваться на этом этапе)
\/
check (setImmidiate)
\/
close (close events - close socker, http connection)

микротаски (приоритетные очереди):
nextTickQueue (приоритетная микротаска - process.nextTick)
other microtasks (остальные микротаски) (Promise)

Изначально происходит инициализация синхронного кода, он выполняется в первую очередь.
Перед входом в фазу, либо перед выходом он исполняет все микротаски (то есть когда он не находится в фазе).
Сначала nextTickQueue, затем остальные microtaskи.

ПОВТОРИТЬ: https://www.youtube.com/watch?v=7f787SsgknA&t=1765s&ab_channel=EPAMMoscowITsubbotnik


THREAD POOL - элемент, позволяющий исполнить код и вернуться в главный loop. По умолчанию 4 потока (можно изменить, 
максимум - 128).
Таким образом, параллельно может выполняться 4 процесса. Изменить можно через process.env.UV_THREADPOOL_SIZE = 8.
